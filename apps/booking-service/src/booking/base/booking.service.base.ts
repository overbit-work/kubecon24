/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Booking, // @ts-ignore
  Attendee,
} from "@prisma/client";

export class BookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BookingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingCountArgs>
  ): Promise<number> {
    return this.prisma.booking.count(args);
  }

  async bookings<T extends Prisma.BookingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingFindManyArgs>
  ): Promise<Booking[]> {
    return this.prisma.booking.findMany(args);
  }
  async booking<T extends Prisma.BookingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingFindUniqueArgs>
  ): Promise<Booking | null> {
    return this.prisma.booking.findUnique(args);
  }
  async createBooking<T extends Prisma.BookingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingCreateArgs>
  ): Promise<Booking> {
    return this.prisma.booking.create<T>(args);
  }
  async updateBooking<T extends Prisma.BookingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingUpdateArgs>
  ): Promise<Booking> {
    return this.prisma.booking.update<T>(args);
  }
  async deleteBooking<T extends Prisma.BookingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingDeleteArgs>
  ): Promise<Booking> {
    return this.prisma.booking.delete(args);
  }

  async getAttendee(parentId: string): Promise<Attendee | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .attendee();
  }
}
