/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Attendee as PrismaAttendee,
  Address as PrismaAddress,
  Booking as PrismaBooking,
  Company as PrismaCompany,
} from "@prisma/client";

export class AttendeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AttendeeCountArgs, "select">): Promise<number> {
    return this.prisma.attendee.count(args);
  }

  async attendees<T extends Prisma.AttendeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendeeFindManyArgs>
  ): Promise<PrismaAttendee[]> {
    return this.prisma.attendee.findMany<Prisma.AttendeeFindManyArgs>(args);
  }
  async attendee<T extends Prisma.AttendeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendeeFindUniqueArgs>
  ): Promise<PrismaAttendee | null> {
    return this.prisma.attendee.findUnique(args);
  }
  async createAttendee<T extends Prisma.AttendeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendeeCreateArgs>
  ): Promise<PrismaAttendee> {
    return this.prisma.attendee.create<T>(args);
  }
  async updateAttendee<T extends Prisma.AttendeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendeeUpdateArgs>
  ): Promise<PrismaAttendee> {
    return this.prisma.attendee.update<T>(args);
  }
  async deleteAttendee<T extends Prisma.AttendeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendeeDeleteArgs>
  ): Promise<PrismaAttendee> {
    return this.prisma.attendee.delete(args);
  }

  async findAddresses(
    parentId: string,
    args: Prisma.AddressFindManyArgs
  ): Promise<PrismaAddress[]> {
    return this.prisma.attendee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .addresses(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.attendee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.attendee
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
