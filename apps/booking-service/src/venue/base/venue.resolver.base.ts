/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Venue } from "./Venue";
import { VenueCountArgs } from "./VenueCountArgs";
import { VenueFindManyArgs } from "./VenueFindManyArgs";
import { VenueFindUniqueArgs } from "./VenueFindUniqueArgs";
import { CreateVenueArgs } from "./CreateVenueArgs";
import { UpdateVenueArgs } from "./UpdateVenueArgs";
import { DeleteVenueArgs } from "./DeleteVenueArgs";
import { VenueService } from "../venue.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Venue)
export class VenueResolverBase {
  constructor(
    protected readonly service: VenueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "read",
    possession: "any",
  })
  async _venuesMeta(
    @graphql.Args() args: VenueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Venue])
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "read",
    possession: "any",
  })
  async venues(@graphql.Args() args: VenueFindManyArgs): Promise<Venue[]> {
    return this.service.venues(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Venue, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "read",
    possession: "own",
  })
  async venue(
    @graphql.Args() args: VenueFindUniqueArgs
  ): Promise<Venue | null> {
    const result = await this.service.venue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Venue)
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "create",
    possession: "any",
  })
  async createVenue(@graphql.Args() args: CreateVenueArgs): Promise<Venue> {
    return await this.service.createVenue({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Venue)
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  async updateVenue(
    @graphql.Args() args: UpdateVenueArgs
  ): Promise<Venue | null> {
    try {
      return await this.service.updateVenue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Venue)
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "delete",
    possession: "any",
  })
  async deleteVenue(
    @graphql.Args() args: DeleteVenueArgs
  ): Promise<Venue | null> {
    try {
      return await this.service.deleteVenue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
