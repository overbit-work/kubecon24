/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Courier as PrismaCourier,
  CourierAssignedDriver as PrismaCourierAssignedDriver,
  Shipment as PrismaShipment,
} from "@prisma/client";

export class CourierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CourierCountArgs, "select">): Promise<number> {
    return this.prisma.courier.count(args);
  }

  async couriers<T extends Prisma.CourierFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierFindManyArgs>
  ): Promise<PrismaCourier[]> {
    return this.prisma.courier.findMany<Prisma.CourierFindManyArgs>(args);
  }
  async courier<T extends Prisma.CourierFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierFindUniqueArgs>
  ): Promise<PrismaCourier | null> {
    return this.prisma.courier.findUnique(args);
  }
  async createCourier<T extends Prisma.CourierCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierCreateArgs>
  ): Promise<PrismaCourier> {
    return this.prisma.courier.create<T>(args);
  }
  async updateCourier<T extends Prisma.CourierUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierUpdateArgs>
  ): Promise<PrismaCourier> {
    return this.prisma.courier.update<T>(args);
  }
  async deleteCourier<T extends Prisma.CourierDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CourierDeleteArgs>
  ): Promise<PrismaCourier> {
    return this.prisma.courier.delete(args);
  }

  async findCourierAssignedDrivers(
    parentId: string,
    args: Prisma.CourierAssignedDriverFindManyArgs
  ): Promise<PrismaCourierAssignedDriver[]> {
    return this.prisma.courier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courierAssignedDrivers(args);
  }

  async findShipments(
    parentId: string,
    args: Prisma.ShipmentFindManyArgs
  ): Promise<PrismaShipment[]> {
    return this.prisma.courier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shipments(args);
  }
}
