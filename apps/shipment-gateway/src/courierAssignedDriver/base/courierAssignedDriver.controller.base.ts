/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CourierAssignedDriverService } from "../courierAssignedDriver.service";
import { CourierAssignedDriverCreateInput } from "./CourierAssignedDriverCreateInput";
import { CourierAssignedDriver } from "./CourierAssignedDriver";
import { CourierAssignedDriverFindManyArgs } from "./CourierAssignedDriverFindManyArgs";
import { CourierAssignedDriverWhereUniqueInput } from "./CourierAssignedDriverWhereUniqueInput";
import { CourierAssignedDriverUpdateInput } from "./CourierAssignedDriverUpdateInput";

export class CourierAssignedDriverControllerBase {
  constructor(protected readonly service: CourierAssignedDriverService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CourierAssignedDriver })
  async createCourierAssignedDriver(
    @common.Body() data: CourierAssignedDriverCreateInput
  ): Promise<CourierAssignedDriver> {
    return await this.service.createCourierAssignedDriver({
      data: {
        ...data,

        courier: data.courier
          ? {
              connect: data.courier,
            }
          : undefined,
      },
      select: {
        courier: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CourierAssignedDriver] })
  @ApiNestedQuery(CourierAssignedDriverFindManyArgs)
  async courierAssignedDrivers(
    @common.Req() request: Request
  ): Promise<CourierAssignedDriver[]> {
    const args = plainToClass(CourierAssignedDriverFindManyArgs, request.query);
    return this.service.courierAssignedDrivers({
      ...args,
      select: {
        courier: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CourierAssignedDriver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async courierAssignedDriver(
    @common.Param() params: CourierAssignedDriverWhereUniqueInput
  ): Promise<CourierAssignedDriver | null> {
    const result = await this.service.courierAssignedDriver({
      where: params,
      select: {
        courier: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CourierAssignedDriver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCourierAssignedDriver(
    @common.Param() params: CourierAssignedDriverWhereUniqueInput,
    @common.Body() data: CourierAssignedDriverUpdateInput
  ): Promise<CourierAssignedDriver | null> {
    try {
      return await this.service.updateCourierAssignedDriver({
        where: params,
        data: {
          ...data,

          courier: data.courier
            ? {
                connect: data.courier,
              }
            : undefined,
        },
        select: {
          courier: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CourierAssignedDriver })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCourierAssignedDriver(
    @common.Param() params: CourierAssignedDriverWhereUniqueInput
  ): Promise<CourierAssignedDriver | null> {
    try {
      return await this.service.deleteCourierAssignedDriver({
        where: params,
        select: {
          courier: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
