/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CourierAssignedDriver as PrismaCourierAssignedDriver,
  Courier as PrismaCourier,
} from "@prisma/client";

export class CourierAssignedDriverServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CourierAssignedDriverCountArgs, "select">
  ): Promise<number> {
    return this.prisma.courierAssignedDriver.count(args);
  }

  async courierAssignedDrivers<
    T extends Prisma.CourierAssignedDriverFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CourierAssignedDriverFindManyArgs>
  ): Promise<PrismaCourierAssignedDriver[]> {
    return this.prisma.courierAssignedDriver.findMany<Prisma.CourierAssignedDriverFindManyArgs>(
      args
    );
  }
  async courierAssignedDriver<
    T extends Prisma.CourierAssignedDriverFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CourierAssignedDriverFindUniqueArgs>
  ): Promise<PrismaCourierAssignedDriver | null> {
    return this.prisma.courierAssignedDriver.findUnique(args);
  }
  async createCourierAssignedDriver<
    T extends Prisma.CourierAssignedDriverCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CourierAssignedDriverCreateArgs>
  ): Promise<PrismaCourierAssignedDriver> {
    return this.prisma.courierAssignedDriver.create<T>(args);
  }
  async updateCourierAssignedDriver<
    T extends Prisma.CourierAssignedDriverUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CourierAssignedDriverUpdateArgs>
  ): Promise<PrismaCourierAssignedDriver> {
    return this.prisma.courierAssignedDriver.update<T>(args);
  }
  async deleteCourierAssignedDriver<
    T extends Prisma.CourierAssignedDriverDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CourierAssignedDriverDeleteArgs>
  ): Promise<PrismaCourierAssignedDriver> {
    return this.prisma.courierAssignedDriver.delete(args);
  }

  async getCourier(parentId: string): Promise<PrismaCourier | null> {
    return this.prisma.courierAssignedDriver
      .findUnique({
        where: { id: parentId },
      })
      .courier();
  }
}
