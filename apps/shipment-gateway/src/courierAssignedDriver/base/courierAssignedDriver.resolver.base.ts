/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CourierAssignedDriver } from "./CourierAssignedDriver";
import { CourierAssignedDriverCountArgs } from "./CourierAssignedDriverCountArgs";
import { CourierAssignedDriverFindManyArgs } from "./CourierAssignedDriverFindManyArgs";
import { CourierAssignedDriverFindUniqueArgs } from "./CourierAssignedDriverFindUniqueArgs";
import { CreateCourierAssignedDriverArgs } from "./CreateCourierAssignedDriverArgs";
import { UpdateCourierAssignedDriverArgs } from "./UpdateCourierAssignedDriverArgs";
import { DeleteCourierAssignedDriverArgs } from "./DeleteCourierAssignedDriverArgs";
import { Courier } from "../../courier/base/Courier";
import { CourierAssignedDriverService } from "../courierAssignedDriver.service";
@graphql.Resolver(() => CourierAssignedDriver)
export class CourierAssignedDriverResolverBase {
  constructor(protected readonly service: CourierAssignedDriverService) {}

  async _courierAssignedDriversMeta(
    @graphql.Args() args: CourierAssignedDriverCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CourierAssignedDriver])
  async courierAssignedDrivers(
    @graphql.Args() args: CourierAssignedDriverFindManyArgs
  ): Promise<CourierAssignedDriver[]> {
    return this.service.courierAssignedDrivers(args);
  }

  @graphql.Query(() => CourierAssignedDriver, { nullable: true })
  async courierAssignedDriver(
    @graphql.Args() args: CourierAssignedDriverFindUniqueArgs
  ): Promise<CourierAssignedDriver | null> {
    const result = await this.service.courierAssignedDriver(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CourierAssignedDriver)
  async createCourierAssignedDriver(
    @graphql.Args() args: CreateCourierAssignedDriverArgs
  ): Promise<CourierAssignedDriver> {
    return await this.service.createCourierAssignedDriver({
      ...args,
      data: {
        ...args.data,

        courier: args.data.courier
          ? {
              connect: args.data.courier,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CourierAssignedDriver)
  async updateCourierAssignedDriver(
    @graphql.Args() args: UpdateCourierAssignedDriverArgs
  ): Promise<CourierAssignedDriver | null> {
    try {
      return await this.service.updateCourierAssignedDriver({
        ...args,
        data: {
          ...args.data,

          courier: args.data.courier
            ? {
                connect: args.data.courier,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CourierAssignedDriver)
  async deleteCourierAssignedDriver(
    @graphql.Args() args: DeleteCourierAssignedDriverArgs
  ): Promise<CourierAssignedDriver | null> {
    try {
      return await this.service.deleteCourierAssignedDriver(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Courier, {
    nullable: true,
    name: "courier",
  })
  async getCourier(
    @graphql.Parent() parent: CourierAssignedDriver
  ): Promise<Courier | null> {
    const result = await this.service.getCourier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
